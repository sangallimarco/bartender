{"version":3,"sources":["core/glass-builder.ts","components/recipe/recipe-utils.ts","core/css-utils.ts","components/glass/glass.tsx","components/recipe/recipe-item.tsx","components/button/button.tsx","types.ts","components/dialog/dialog.tsx","components/processing/processing.tsx","core/browser-history.ts","components/recipe/recipe-list-machine.ts","routes.ts","core/websocket.ts","components/recipe/recipe-machine.ts","components/recipe/recipe-list.tsx","components/input/input.tsx","components/select/select.tsx","components/input-container/input-container.tsx","components/recipe/recipe-edit.tsx","App.tsx","index.tsx"],"names":["buildGlass","parts","colors","element","_a","getBoundingClientRect","vw","width","vh","height","struct","map","part","i","color","svg","Object","src","k","reduce","c","y","r","forEach","_b","x","ml","radius","Xa","Xb","pRadius","topRadius","XTa","XTb","YTb","ellipse","d3_path_src","moveTo","bezierCurveTo","lineTo","closePath","append","attr","toString","arc","arcPath","arcColor","d3_color_src","l","buildPart","yy","rr","getCurrentFamily","families","recipeFamily","currentFamily","find","family","id","CSSUtils","glass_Glass","_super","Glass","_this","apply","this","arguments","saveRef","ref","props","ingredients","ingredient","getIngredientColors","__extends","prototype","render","react","className","RecipeItem","handleClick","recipe","onClick","recipe_item_extends","label","description","filterDictionary","dictionary","keys","key","push","parse","args","_i","length","item","filtered","join","acc","arg","ButtonType","ServerActions","Button","button_extends","type","children","Dialog","dialog_extends","active","onConfirm","onDismiss","message","dialog-active","components_button_button","ACTION","DEFAULT","Processing","processing_extends","processing-active","browserHistory","es","RecipeListMachineState","RecipeListMachineAction","RecipeMachineService","PumpPin","ROUTE","types_a","CMD_RECIPES","index_umd","resolve","RECIPES","data","CMD_MAKE","PROCESSING","CMD_FAMILIES","FAMILIES","CMD_EDIT","EDIT","CMD_NEW","NEW","CMD_DELETE","SET_RECEPY","SET_PART","SET_ATTRIBUTE","root","edit","webSocketService","WebSocketService","action","messages","ready","onMessage","event","payload","payloadObject","JSON","action_1","route","routes","callback","e","host","window","location","ws","reconnecting_websocket_default","a","addEventListener","setInterval","processQueue","on","uuid","node_modules_uuid","detachListener","send","msg","stringify","bindDispatcher","actions","dispatch","selectedAction","__assign","unbindAll","shift","filter","RecipeMachineState","RecipeMachineAction","recipe_machine_RecipeMachineService","RecipeListStateMachine","initial","LIST","states","recipe_list_machine_a","recipe_list_machine_b","FETCH_RECIPES","FETCH_FAMILIES","cxt","recipes","CREATE","SET_ADMIN","ctx","admin","SET_RECIPE","target","CONFIRMATION","recipeId","_c","MAKE","CANCEL","_d","processing","NULL","DONE","recipe_list_RecipeListBase","RecipeListBase","call","handleKeyDown","context","handleConfirm","handleDismiss","handleSelected","injectMachineOptions","recipe_list_extends","componentDidMount","document","componentWillUnmount","removeEventListener","currentState","dialogVisible","renderItems","dialog_dialog","components_processing_processing","items","recipe_recipe_item","RecipeList","lib","input_Input","Input","state","value","handleChange","onChange","undefined","setState","stopPropagation","input_extends","componentDidUpdate","prevProps","prevState","prevValue","disabled","autoFocus","placeholder","name","select_Select","Select","select_extends","options","renderOptions","o","InputContainer","input_container_extends","RecipeStateMachine","INIT","recipe_machine_a","recipe_machine_b","HYDRATE","recipe_machine_assign","recipe_machine_c","SET_LABEL","SET_DESCRIPTION","SET_FAMILY","slice","parseInt","SAVE","DELETE","RecipeInitialContext","recipe_edit_RecipeEditBase","RecipeEditBase","handleLabelChange","handleDescriptionChange","handleRemove","handleSubmit","handlePumpChange","handleSelect","recipe_edit_assign","recipe_edit_extends","history","input_container_input_container","renderPumps","ingredients_1","indx","RecipeEdit","src_App_0","App","App_extends","Router","Switch","Route","path","component","react_dom","getElementById"],"mappings":"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","file":"static/js/main.c80d8906.chunk.js","sourcesContent":["import { select, Selection } from 'd3-selection';\nimport { path } from 'd3-path';\nimport { hsl } from 'd3-color';\n\ninterface PartColor { part: number; color: string };\n\nexport function buildPart(svg: Selection<SVGSVGElement, {}, null, undefined>, x: number, y: number, ml: number, radius: number, color: string) {\n    const h = ml;\n    const Xa = x - radius;\n    const Xb = x + radius;\n    const pRadius = radius / 6; // fake perspective\n    const topRadius = radius + (ml / 4); // Ndeg diagonal\n    const XTa = x - topRadius;\n    const XTb = x + topRadius;\n    const YTb = y - h;\n    // const pTRadius = topRadius / 6;\n\n    const ellipse = path();\n    ellipse.moveTo(Xa, y)\n    ellipse.bezierCurveTo(Xa, y + pRadius, Xb, y + pRadius, Xb, y)\n    ellipse.lineTo(XTb, YTb)\n    ellipse.bezierCurveTo(XTb, YTb - pRadius, XTa, YTb - pRadius, XTa, YTb)\n    ellipse.closePath();\n\n    const ellipsePath = svg.append('path');\n    ellipsePath.attr('d', ellipse.toString())\n        .attr('stroke', color)\n        .attr('stroke-width', 1)\n        .attr('fill', color)\n        .attr('opacity', 0.8);\n\n    const arc = path();\n    arc.moveTo(XTa, YTb)\n    arc.bezierCurveTo(XTa, YTb + pRadius, XTb, YTb + pRadius, XTb, YTb)\n    const arcPath = svg.append('path');\n    const arcColor = hsl(color);\n    arcColor.l = arcColor.l - 0.2;\n    arcPath.attr('d', arc.toString())\n        .attr('stroke', arcColor.toString())\n        .attr('stroke-width', 1)\n        .attr('fill', 'none');\n\n    return [YTb, topRadius];\n}\n\nexport function buildGlass(parts: number[], colors: string[], element: SVGSVGElement) {\n    if (!element) {\n        return;\n    }\n\n    const {\n        width: vw,\n        height: vh\n    } = element.getBoundingClientRect();\n\n    const struct: PartColor[] = parts.map((part: number, i: number) => {\n        const color: string = colors[i] || '#ffffff';\n        return { part, color };\n    })\n\n    const svg = select(element);\n    const padding = 10;\n    const vk = vh - (padding * 2); // padding\n    const total = struct.reduce((c, { part }) => c + part, 0);\n    const k = (vk / total);\n\n    let y = vh - padding;\n    let r = vw / 6;\n    struct.forEach(({ part, color }) => {\n        const ml = part * k;\n        const [yy, rr] = buildPart(svg, vw / 2, y, ml, r, color);\n        y = yy;\n        r = rr;\n    });\n}","import { RecipeIngredient, RecipeFamily } from '../../types';\n\nexport function getCurrentFamily(families: RecipeFamily[], recipeFamily: string): RecipeFamily | null {\n    if (recipeFamily && families) {\n        const currentFamily = families.find(family => family.id === recipeFamily);\n        if (currentFamily) {\n            return currentFamily;\n        }\n    }\n    return null;\n}\n\nexport function getIngredientColors(ingredients: RecipeIngredient[]): string[] {\n    return ingredients.map(ingredient => {\n        return ingredient.color;\n    });\n}","import { Types } from './types';\n\nexport type BooleanDictionary = Types.Dictionary<boolean | string | number | undefined>;\nexport type ClassNameItem = BooleanDictionary | string | undefined;\n\nexport namespace CSSUtils {\n    export function parse(...args: ClassNameItem[]): string {\n        const className: string[] = [];\n\n        args.forEach((item: ClassNameItem) => {\n            if (item) {\n                if (typeof item === 'object') {\n                    const filtered = filterDictionary(item as BooleanDictionary);\n                    className.push(...filtered);\n                } else {\n                    className.push(item);\n                }\n            }\n        });\n        return className.join(' ');\n    }\n\n    export function filterDictionary(dictionary: BooleanDictionary): string[] {\n        const className: string[] = [];\n\n        Object.keys(dictionary).forEach((key: string) => {\n            const val = dictionary[key];\n            if (val) {\n                className.push(key);\n            }\n        });\n        return className;\n    }\n\n    export function join(...args: string[]): string {\n        return args.reduce((acc: string, arg: string) => (arg ? `${acc} ${arg}` : acc), '');\n    }\n}\n","import * as React from 'react';\nimport { buildGlass } from '../../core/glass-builder';\nimport './glass.css';\nimport { RecipeIngredient } from '../../types';\nimport { getIngredientColors } from '../recipe/recipe-utils';\n\n\nexport interface GlassProps {\n    ingredients: RecipeIngredient[];\n    parts: number[];\n}\n\nexport class Glass extends React.Component<GlassProps, {}>{\n\n    public render() {\n        return <svg className=\"glass\" ref={this.saveRef} />\n    }\n\n    private saveRef = (ref: SVGSVGElement) => {\n        const { parts, ingredients } = this.props;\n        const colors = getIngredientColors(ingredients);\n        buildGlass(parts, colors, ref)\n    }\n}","import * as React from 'react';\nimport './recipe-item.css';\nimport { Recipe, RecipeIngredient } from '../../types';\nimport { Glass } from '../glass/glass';\n\nexport interface RecipeItemProps {\n    recipe: Recipe;\n    ingredients: RecipeIngredient[];\n    onClick: (recipe: Recipe) => void;\n}\n\nexport default class RecipeItem extends React.PureComponent<RecipeItemProps, any> {\n\n    public render() {\n        const { recipe: { label, parts, description }, ingredients } = this.props;\n        return (\n            <div className=\"recipe__item\" onClick={this.handleClick}>\n                <div className=\"recipe__item__title\">{label}</div>\n                <div className=\"recipe__item__glass\"><Glass parts={parts} ingredients={ingredients} /></div>\n                <div className=\"recipe__item__description\">{description}</div>\n            </div >\n        );\n    }\n\n    private handleClick = () => {\n        const { recipe, onClick } = this.props;\n        onClick(recipe);\n    }\n}\n","import * as React from 'react';\nimport { CSSUtils } from '../../core/css-utils';\nimport './button.css';\n\nexport enum ButtonType {\n    DEFAULT = 'default',\n    ACTION = 'action'\n}\n\nexport interface ButtonProps {\n    onClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    children: string;\n    type: ButtonType;\n}\n\nexport default class Button extends React.Component<ButtonProps, any> {\n    public render() {\n        const { type, children, onClick } = this.props;\n        const className = CSSUtils.parse('button', `button-${type}`)\n        return (\n            <button className={className} onClick={onClick}>\n                {children}\n            </button>\n        );\n    }\n}\n","import { ActionType, createAction } from 'typesafe-actions';\n\nexport enum ServerActions {\n    TEST = 'TEST',\n    CMD_MAKE = 'CMD_MAKE',\n    PROCESSING = 'PROCESSING',\n    CMD_RECIPES = 'CMD_RECIPES',\n    RECIPES = 'RECIPES',\n    CMD_NEW = 'CMD_NEW',\n    NEW = 'NEW',\n    CMD_EDIT = 'CMD_EDIT',\n    EDIT = 'EDIT',\n    GET = 'GET',\n    CMD_FAMILIES = 'CMD_FAMILIES',\n    FAMILIES = 'FAMILIES',\n    SET_RECEPY = 'SET_RECEPY',\n    SET_PART = 'SET_PART',\n    SET_ATTRIBUTE = 'SET_ATTRIBUTE',\n    CMD_DELETE = 'CMD_DELETE',\n}\n\nexport interface ProcessingPayload {\n    processing: boolean;\n    total: number;\n}\n\nexport interface RecipePayload {\n    recipe: Recipe;\n}\n\nexport interface RecipeNewPayload {\n    id: string;\n}\n\nexport interface RecipeFamiliesPayload {\n    families: RecipeFamily[];\n}\n\nexport interface RecepiesPayload {\n    recipes: Recipe[];\n}\n\nexport interface MakePayload {\n    id: string;\n}\n\nexport interface GetPayload {\n    id: string;\n}\n\nexport interface AttributePayload {\n    id: string;\n    value: string;\n}\n\nexport interface Recipe {\n    id: string;\n    recipeFamily: string;\n    label: string;\n    parts: number[];\n    description: string;\n}\n\nexport interface RecipeFamily {\n    id: string;\n    label: string;\n    ingredients: RecipeIngredient[];\n}\n\nexport interface RecipeIngredient {\n    label: string;\n    color: string;\n}\n\nexport const PumpPin = [\n    7,\n    11,\n    12,\n    13,\n    // 15\n];\n\n// export enum Pump {\n//     A = PumpPin[0], // GPIO-4\n//     B = PumpPin[1], // GPIO-17\n//     C = PumpPin[2], // GPIO-18\n//     D = PumpPin[3], // GPIO-27\n//     // E = PumpPin[4] // GPIO-22\n// }\n\n// @TODO refactor this\n\nexport const RootActions = {\n    [ServerActions.CMD_RECIPES]: createAction(ServerActions.CMD_RECIPES, resolve => {\n        return () => {\n            return resolve({});\n        };\n    }),\n    [ServerActions.RECIPES]: createAction(ServerActions.RECIPES, resolve => {\n        return (data: RecepiesPayload) => resolve(data);\n    }),\n\n    [ServerActions.CMD_MAKE]: createAction(ServerActions.CMD_MAKE, resolve => {\n        return (data: RecipePayload) => resolve(data);\n    }),\n    [ServerActions.PROCESSING]: createAction(ServerActions.PROCESSING, resolve => {\n        return (data: ProcessingPayload) => resolve(data);\n    }),\n\n    [ServerActions.CMD_FAMILIES]: createAction(ServerActions.CMD_FAMILIES, resolve => {\n        return () => resolve({});\n    }),\n    [ServerActions.FAMILIES]: createAction(ServerActions.FAMILIES, resolve => {\n        return (data: RecipeFamiliesPayload) => resolve(data);\n    }),\n\n    [ServerActions.CMD_EDIT]: createAction(ServerActions.CMD_EDIT, resolve => {\n        return (data: RecipePayload) => resolve(data);\n    }),\n    [ServerActions.EDIT]: createAction(ServerActions.EDIT, resolve => {\n        return () => resolve({});\n    }),\n\n    [ServerActions.CMD_NEW]: createAction(ServerActions.CMD_NEW, resolve => {\n        return () => resolve({});\n    }),\n    [ServerActions.NEW]: createAction(ServerActions.NEW, resolve => {\n        return (data: RecipePayload) => resolve(data);\n    }),\n\n    [ServerActions.CMD_DELETE]: createAction(ServerActions.CMD_DELETE, resolve => {\n        return (data: RecipeNewPayload) => resolve(data);\n    }),\n\n    [ServerActions.SET_RECEPY]: createAction(ServerActions.SET_RECEPY, resolve => {\n        return (data: Recipe) => resolve(data);\n    }),\n    [ServerActions.SET_PART]: createAction(ServerActions.SET_PART, resolve => {\n        return (data: AttributePayload) => resolve(data);\n    }),\n    [ServerActions.SET_ATTRIBUTE]: createAction(ServerActions.SET_ATTRIBUTE, resolve => {\n        return (data: AttributePayload) => resolve(data);\n    }),\n};\n\nexport type RootAction = ActionType<typeof RootActions>;\n","import * as React from 'react';\nimport './dialog.css';\nimport Button, { ButtonType } from '../button/button';\nimport { CSSUtils } from '../../core/css-utils';\n\nexport interface DialogProps {\n    active: boolean;\n    message: string;\n    onConfirm: () => void;\n    onDismiss: () => void;\n}\n\nexport default class Dialog extends React.Component<DialogProps, any> {\n    public render() {\n        const { active, onConfirm, onDismiss, message } = this.props;\n        const className = CSSUtils.parse('dialog', {\n            'dialog-active': active\n        });\n        return (\n            <div className={className}>\n                <div className=\"dialog__container\">\n                    <div className=\"dialog__message\">{message}</div>\n                    <div className=\"dialog__confirm\"><Button type={ButtonType.ACTION} onClick={onConfirm}>CONFIRM</Button></div>\n                    <div className=\"dialog__dismiss\"><Button type={ButtonType.DEFAULT} onClick={onDismiss}>CANCEL</Button></div>\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from 'react';\nimport './processing.css';\nimport { CSSUtils } from '../../core/css-utils';\n\nexport interface ProcessingProps {\n    active: boolean;\n}\n\nexport default class Processing extends React.Component<ProcessingProps, any> {\n    public render() {\n        const { active } = this.props;\n        const className = CSSUtils.parse('processing', {\n            'processing-active': active\n        });\n        return (\n            <div className={className}>\n                <div className=\"processing__container\">\n                    animation here\n                </div>\n            </div>\n        );\n    }\n}\n","import { createBrowserHistory } from 'history';\nexport const browserHistory = createBrowserHistory();","import { assign, send, log } from 'xstate-ext/lib/actions';\nimport { MachineConfig, EventObject } from 'xstate-ext';\nimport { StateMachineAction } from 'react-xstate-hoc';\nimport { Recipe, RecipeFamily, ServerActions } from 'src/types';\nimport { webSocketService } from 'src/core/websocket';\n\nexport interface RecipeListContext {\n    family: string;\n    families: RecipeFamily[];\n    recipes: Recipe[];\n    message: string;\n    admin: boolean;\n    recipeId: string;\n}\n\nexport enum RecipeListMachineState {\n    LIST = 'LIST',\n    PROCESSING = 'PROCESSING',\n    EDIT = 'EDIT',\n    CONFIRMATION = 'CONFIRMATION'\n}\n\nexport enum RecipeListMachineAction {\n    FETCH_RECIPES = 'FETCH_RECIPES',\n    // RECIPES = 'RECIPES',\n    FETCH_FAMILIES = 'FETCH_FAMILIES',\n    // FAMILIES = 'FAMILIES',\n    MAKE = 'MAKE',\n    // PROCESSING = 'PROCESSING',\n    DONE = 'DONE',\n    CANCEL = 'CANCEL',\n    CREATE = 'CREATE',\n    SET_RECIPE = 'SET_RECIPE',\n    NULL = 'NULL',\n    SET_ADMIN = 'SET_ADMIN'\n}\n\nexport interface RecipeListMachineStateSchema {\n    states: {\n        [RecipeListMachineState.LIST]: {};\n        [RecipeListMachineState.PROCESSING]: {};\n        [RecipeListMachineState.CONFIRMATION]: {};\n    }\n}\n\nexport type RecipeListMachineEvent =\n    | { type: RecipeListMachineAction.FETCH_RECIPES }\n    | { type: ServerActions.RECIPES, recipes: Recipe[] }\n    | { type: RecipeListMachineAction.FETCH_FAMILIES }\n    | { type: ServerActions.FAMILIES, families: RecipeFamily[] }\n    | { type: RecipeListMachineAction.SET_RECIPE, recipe: Recipe }\n    | { type: RecipeListMachineAction.MAKE }\n    | { type: ServerActions.PROCESSING, processing: boolean, total: number }\n    | { type: RecipeListMachineAction.DONE }\n    | { type: RecipeListMachineAction.NULL }\n    | { type: RecipeListMachineAction.SET_ADMIN }\n    | { type: RecipeListMachineAction.CREATE }\n    | { type: RecipeListMachineAction.CANCEL };\n\nexport type RecipeListMachineEventType = StateMachineAction<RecipeListContext>;\n\nexport enum RecipeMachineService {\n    FETCH_DATA = 'FETCH_DATA'\n}\n\nexport const RecipeListStateMachine: MachineConfig<RecipeListContext, RecipeListMachineStateSchema, RecipeListMachineEvent> = {\n    id: 'test',\n    initial: RecipeListMachineState.LIST,\n    states: {\n        [RecipeListMachineState.LIST]: {\n            on: {\n                [RecipeListMachineAction.FETCH_RECIPES]: {\n                    actions: [\n                        log(() => 'CMD_RECIPES'),\n                        ServerActions.CMD_RECIPES\n                    ]\n                },\n                [RecipeListMachineAction.FETCH_FAMILIES]: {\n                    actions: [\n                        log(() => 'CMD_FAMILIES'),\n                        ServerActions.CMD_FAMILIES\n                    ]\n                },\n                [ServerActions.RECIPES]: {\n                    actions: assign((cxt, event) => {\n                        const { recipes } = event;\n                        return {\n                            recipes\n                        }\n                    })\n                },\n                [ServerActions.FAMILIES]: {\n                    actions: assign((cxt, event) => {\n                        const { families } = event;\n                        return {\n                            families\n                        }\n                    })\n                },\n                [RecipeListMachineAction.CREATE]: {\n                    actions: () => {\n                        webSocketService.send(ServerActions.CMD_NEW, {});\n                    }\n                },\n                [RecipeListMachineAction.SET_ADMIN]: {\n                    actions: assign((ctx) => {\n                        return { admin: !ctx.admin };\n                    })\n                },\n                [RecipeListMachineAction.SET_RECIPE]: {\n                    target: RecipeListMachineState.CONFIRMATION,\n                    actions: assign((ctx, event) => {\n                        const { recipe } = event;\n                        const { label, id: recipeId } = recipe;\n                        const message = `Confirm ${label}?`;\n\n                        return {\n                            recipeId,\n                            message\n                        }\n                    })\n                },\n            }\n        },\n        [RecipeListMachineState.CONFIRMATION]: {\n            on: {\n                [RecipeListMachineAction.MAKE]: {\n                    target: RecipeListMachineState.PROCESSING,\n                    actions: (ctx) => {\n                        const recipe = ctx.recipes.find(r => r.id === ctx.recipeId);\n                        if (recipe) {\n                            webSocketService.send(ServerActions.CMD_MAKE, { recipe });\n                        }\n                    }\n                },\n                [RecipeListMachineAction.CANCEL]: {\n                    target: RecipeListMachineState.LIST\n                }\n            }\n        },\n        [RecipeListMachineState.PROCESSING]: {\n            on: {\n                [ServerActions.PROCESSING]: {\n                    actions: send((ctx, event) => {\n                        const { processing } = event as EventObject;\n                        if (!processing) {\n                            return { type: RecipeListMachineAction.DONE };\n                        }\n                        return { type: RecipeListMachineAction.NULL };\n                    })\n                },\n                [RecipeListMachineAction.DONE]: {\n                    target: RecipeListMachineState.LIST\n                }\n            }\n        }\n    }\n};\n\nexport const RecipeListInitialContext: RecipeListContext = {\n    family: '',\n    families: [],\n    recipes: [],\n    message: '',\n    admin: false,\n    recipeId: ''\n};","export const ROUTE = {\n    root: '/',\n    edit: '/edit/',\n}","import ReconnectingWebSocket from 'reconnecting-websocket';\nimport { v4 } from 'uuid';\nimport { EventObject } from 'xstate-ext';\n\ntype WebSocketCallback<T> = (data: T) => void;\n\nexport interface WebsocketPayload<T> {\n    action: string;\n    data: T;\n}\n\nexport type WebSocketListener = () => void;\n\nexport interface WebSocketEvent {\n    data: string;\n}\n\nexport interface WebSocketRoute {\n    uuid: string;\n    action: string;\n    callback: WebSocketCallback<any>;\n}\n\nclass WebSocketService {\n    private routes: WebSocketRoute[];\n    private ws: ReconnectingWebSocket;\n    private messages: string[] = [];\n    private ready: boolean = false;\n\n    constructor(action?: string) {\n        const { location: { host } } = window;\n        action = action || `ws://${host}/ws`;\n\n        this.routes = [];\n        this.ws = new ReconnectingWebSocket(action);\n        this.ws.addEventListener('open', () => {\n            this.ready = true;\n        });\n        this.ws.addEventListener('close', () => {\n            this.ready = false;\n        }\n        );\n        this.ws.addEventListener('message', this.onMessage);\n\n        setInterval(() => {\n            this.processQueue();\n        }, 10);\n    }\n\n    public on<T>(action: string, callback: WebSocketCallback<T>): WebSocketListener {\n        const uuid = v4();\n        const route: WebSocketRoute = { uuid, action, callback };\n        this.routes.push(route);\n\n        return () => {\n            this.detachListener(uuid);\n        }\n    }\n\n    public send<T>(action: string, data: T): void {\n        const payload: WebsocketPayload<T> = { action, data };\n        const msg: string = JSON.stringify(payload);\n        this.messages.push(msg);\n    }\n\n    // to be refactored\n    public bindDispatcher<T, MachineEvents extends EventObject>(actions: T, dispatch: (action: MachineEvents) => void) {\n        Object.keys(actions).forEach((action: string) => {\n            const selectedAction = actions[action];\n            // const type = getType(selectedAction);\n            this.on<any>(action, (data: any) => {\n                dispatch({ type: selectedAction, ...data });\n            });\n        });\n    }\n\n    public unbindAll() { // TODO implement this for each bindDispatcher\n        this.routes = [];\n    }\n\n    private processQueue() {\n        if (this.messages.length > 0 && this.ready) {\n            const item = this.messages.shift();\n            if (item) {\n                this.ws.send(item);\n            }\n        }\n    }\n\n    private onMessage = (event: WebSocketEvent) => {\n        const { data: payload } = event;\n        try {\n            const payloadObject = JSON.parse(payload);\n            const { action, data } = payloadObject;\n            const route = this.routes.find(x => x.action === action);\n            if (route) {\n                route.callback(data);\n            }\n        } catch (e) {\n            return e;\n        }\n    };\n\n    private detachListener(uuid: string) {\n        this.routes = this.routes.filter((route: WebSocketRoute) => route.uuid !== uuid);\n    }\n\n}\n\nexport const webSocketService = new WebSocketService();\n","import { assign } from 'xstate-ext/lib/actions';\nimport { MachineConfig } from 'xstate-ext';\nimport { StateMachineAction } from 'react-xstate-hoc';\nimport { Recipe, ServerActions, PumpPin } from 'src/types';\nimport { v4 } from 'uuid';\n\nexport type RecipeContext = Recipe;\n\nexport enum RecipeMachineState {\n    EDIT = 'EDIT',\n    INIT = 'INIT'\n}\n\nexport enum RecipeMachineAction {\n    SET_ATTRIBUTE = 'SET_ATTRIBUTE',\n    SET_LABEL = 'SET_LABEL',\n    SET_FAMILY = 'SET_FAMILY',\n    SET_DESCRIPTION = 'SET_DESCRIPTION',\n    DELETE = 'DELETE',\n    CMD_EDIT = 'CMD_EDIT',\n    SET_PART = 'SET_PART',\n    SAVE = 'SAVE',\n    SUBMIT = 'SUBMIT',\n    CANCEL = 'CANCEL',\n    HYDRATE = 'HYDRATE',\n    CREATE = 'CREATE'\n}\n\nexport interface RecipeMachineStateSchema {\n    states: {\n        [RecipeMachineState.INIT]: {};\n        [RecipeMachineState.EDIT]: {};\n    }\n}\n\nexport type RecipeMachineEvent =\n    | { type: RecipeMachineAction.HYDRATE, recipe: Recipe }\n    | { type: RecipeMachineAction.SET_LABEL, label: string }\n    | { type: RecipeMachineAction.SET_DESCRIPTION, description: string }\n    | { type: RecipeMachineAction.SET_FAMILY, recipeFamily: string }\n    | { type: RecipeMachineAction.DELETE }\n    | { type: RecipeMachineAction.CMD_EDIT, recipe: Recipe }\n    | { type: RecipeMachineAction.SET_PART, id: string, value: string }\n    | { type: RecipeMachineAction.SAVE }\n    | { type: RecipeMachineAction.CREATE }\n    | { type: RecipeMachineAction.CANCEL };\n\nexport type RecipeMachineEventType = StateMachineAction<RecipeContext>;\n\nexport enum RecipeMachineService {\n    FETCH_DATA = 'FETCH_DATA'\n}\n\nexport const RecipeStateMachine: MachineConfig<RecipeContext, RecipeMachineStateSchema, RecipeMachineEvent> = {\n    id: 'test',\n    initial: RecipeMachineState.INIT,\n    states: {\n        [RecipeMachineState.INIT]: {\n            on: {\n                [RecipeMachineAction.HYDRATE]: {\n                    target: RecipeMachineState.EDIT,\n                    actions: assign((ctx, event) => {\n                        const { recipe } = event;\n                        return { ...recipe };\n                    })\n                },\n                [RecipeMachineAction.CREATE]: {\n                    target: RecipeMachineState.EDIT,\n                    actions: assign(() => {\n                        return { id: v4() };\n                    })\n                }\n            }\n        },\n        [RecipeMachineState.EDIT]: {\n            on: {\n                [RecipeMachineAction.SET_LABEL]: {\n                    actions: assign((ctx, event) => {\n                        const { label } = event;\n                        return {\n                            label\n                        };\n                    }),\n\n                },\n                [RecipeMachineAction.SET_DESCRIPTION]: {\n                    actions: assign((ctx, event) => {\n                        const { description } = event;\n                        return {\n                            description\n                        };\n                    })\n                },\n                [RecipeMachineAction.SET_FAMILY]: {\n                    actions: assign((ctx, event) => {\n                        const { recipeFamily } = event;\n                        return {\n                            recipeFamily\n                        };\n                    })\n                },\n                [RecipeMachineAction.SET_PART]: {\n                    actions: assign((ctx, event) => {\n                        const { id, value } = event;\n                        const parts = [...ctx.parts];\n                        parts[id as string] = parseInt(value, 10);\n\n                        return {\n                            parts\n                        };\n                    })\n                },\n                [RecipeMachineAction.SAVE]: {\n                    actions: ServerActions.CMD_EDIT\n                },\n                [RecipeMachineAction.DELETE]: {\n                    actions: ServerActions.CMD_DELETE\n                }\n            }\n        }\n    }\n};\n\n// parts from pump array\nconst defaultParts = PumpPin.map(() => 1);\n\nexport const RecipeInitialContext: RecipeContext = {\n    id: '',\n    label: '',\n    parts: [...defaultParts],\n    description: '',\n    recipeFamily: 'default'\n};","import * as React from 'react';\nimport './recipe-list.css';\nimport RecipeItem from './recipe-item';\nimport Dialog from '../dialog/dialog';\nimport Processing from '../processing/processing';\nimport { browserHistory } from '../../core/browser-history';\nimport { Recipe, RecipeFamily, ServerActions } from '../../types';\nimport { getCurrentFamily } from './recipe-utils';\nimport { ROUTE } from '../../routes';\nimport { StateMachineInjectedProps, withStateMachine } from 'react-xstate-hoc';\nimport { RecipeListContext, RecipeListMachineEvent, RecipeListMachineState, RecipeListMachineStateSchema, RecipeListMachineAction, RecipeListStateMachine, RecipeListInitialContext } from './recipe-list-machine';\nimport { webSocketService } from 'src/core/websocket';\n\ninterface RecipeListBaseProps extends StateMachineInjectedProps<RecipeListContext, RecipeListMachineStateSchema, RecipeListMachineEvent> {\n    initial?: boolean;\n}\n\nclass RecipeListBase extends React.PureComponent<RecipeListBaseProps> {\n\n    constructor(props: RecipeListBaseProps) {\n        super(props);\n        const { injectMachineOptions } = props;\n        injectMachineOptions({\n            actions: {\n                [ServerActions.CMD_RECIPES]: () => {\n                    webSocketService.send(ServerActions.CMD_RECIPES, {});\n                },\n                [ServerActions.CMD_FAMILIES]: () => {\n                    webSocketService.send(ServerActions.CMD_FAMILIES, {});\n                }\n            }\n        });\n    }\n\n    public componentDidMount() {\n        const { dispatch } = this.props;\n        // enable edit mode\n        document.addEventListener('keydown', this.handleKeyDown);\n        // auto bind ServerActions\n        webSocketService.bindDispatcher(ServerActions, dispatch);\n        dispatch({ type: RecipeListMachineAction.FETCH_RECIPES });\n        dispatch({ type: RecipeListMachineAction.FETCH_FAMILIES });\n    }\n\n    public componentWillUnmount() {\n        // enable edit mode\n        document.removeEventListener('keydown', this.handleKeyDown);\n        webSocketService.unbindAll();\n    }\n\n    public render() {\n        const { context: { recipes, families, message }, currentState } = this.props;\n        const dialogVisible = currentState === RecipeListMachineState.CONFIRMATION;\n        const processing = currentState === RecipeListMachineState.PROCESSING;\n        return (\n            <div className=\"recipe__list\">\n                {this.renderItems(recipes, families)}\n                <Dialog active={dialogVisible} onConfirm={this.handleConfirm} onDismiss={this.handleDismiss} message={message} />\n                <Processing active={processing} />\n            </div>\n        );\n    }\n\n    public handleKeyDown = (e: KeyboardEvent) => {\n        const { key } = e;\n        const { context: { families }, dispatch } = this.props;\n        switch (key) {\n            case 'e':\n                dispatch({ type: RecipeListMachineAction.SET_ADMIN });\n                break;\n            case 'n':\n                dispatch({ type: RecipeListMachineAction.CREATE });\n                browserHistory.push(ROUTE.edit, { families });\n                break;\n        }\n    }\n\n    private handleConfirm = () => {\n        const { dispatch } = this.props;\n        dispatch({ type: RecipeListMachineAction.MAKE });\n    }\n\n    private handleDismiss = () => {\n        const { dispatch } = this.props;\n        dispatch({ type: RecipeListMachineAction.CANCEL });\n    }\n\n    private handleSelected = (recipe: Recipe) => {\n        const { context: { admin, families }, dispatch } = this.props;\n        dispatch({ type: RecipeListMachineAction.SET_RECIPE, recipe });\n        if (admin) {\n            browserHistory.push(ROUTE.edit, { recipe, families });\n        }\n    }\n\n    private renderItems(items: Recipe[], families: RecipeFamily[]) {\n        return items.map((recipe: Recipe) => {\n            const { id, recipeFamily } = recipe;\n            const family = getCurrentFamily(families, recipeFamily);\n            if (family) {\n                const { ingredients } = family;\n                return <RecipeItem key={id} recipe={recipe} ingredients={ingredients} onClick={this.handleSelected} />;\n            }\n            return null;\n        })\n    }\n}\n\nexport const RecipeList = withStateMachine(RecipeListBase, RecipeListStateMachine, RecipeListInitialContext);","import * as React from 'react';\nimport { CSSUtils } from '../../core/css-utils';\nimport './input.css';\n\nexport interface InputProps {\n    disabled?: boolean;\n    name: string;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    key?: number | string;\n    value?: string;\n    autoFocus?: boolean;\n    placeholder?: string;\n}\n\nexport interface InputState {\n    value: string;\n}\n\nexport class Input extends React.Component<InputProps, InputState> {\n    public state: InputState = {\n        value: ''\n    };\n\n    public componentDidMount() {\n        const { value = '' } = this.props;\n        this.setState({ value });\n    }\n\n    public componentDidUpdate(prevProps: InputProps, prevState: InputState) {\n        const { value: prevValue } = prevProps;\n        const { value } = this.props;\n        if (value !== undefined && prevValue !== value) {\n            this.setState({ value });\n        }\n    }\n\n    public render() {\n        const { disabled, autoFocus, placeholder, name } = this.props;\n        const { value } = this.state;\n        const className = CSSUtils.parse('input', 'input-component');\n        return (\n            <input\n                type=\"text\"\n                name={name}\n                className={className}\n                disabled={disabled}\n                onChange={this.handleChange}\n                value={value}\n                autoFocus={autoFocus}\n                placeholder={placeholder}\n            />\n        );\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { onChange } = this.props;\n        const { target: { value } } = e;\n        if (value !== undefined) {\n            this.setState({ value });\n        }\n        e.stopPropagation();\n        onChange(e);\n    };\n}\n","import * as React from 'react';\nimport { CSSUtils } from '../../core/css-utils';\nimport './select.css';\n\nexport interface SelectProps {\n    disabled?: boolean;\n    name: string;\n    onChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\n    key?: number | string;\n    value?: string;\n    autoFocus?: boolean;\n    placeholder?: string;\n    options: SelectOption[];\n}\n\ninterface SelectOption {\n    id: string;\n    label: string;\n}\n\nexport interface SelectState {\n    value: string;\n}\n\nexport class Select extends React.Component<SelectProps, SelectState> {\n    public state: SelectState = {\n        value: ''\n    };\n\n    public componentDidMount() {\n        const { value = '' } = this.props;\n        this.setState({ value });\n    }\n\n    public componentDidUpdate(prevProps: SelectProps, prevState: SelectState) {\n        const { value: prevValue } = prevProps;\n        const { value } = this.props;\n        if (value !== undefined && prevValue !== value) {\n            this.setState({ value });\n        }\n    }\n\n    public render() {\n        const { disabled, autoFocus, placeholder, name, options } = this.props;\n        const { value } = this.state;\n        const className = CSSUtils.parse('select', 'select-component');\n        return (\n            <select\n                name={name}\n                className={className}\n                disabled={disabled}\n                onChange={this.handleChange}\n                value={value}\n                autoFocus={autoFocus}\n                placeholder={placeholder}\n            >\n                {this.renderOptions(options)}\n            </select>\n        );\n    }\n\n    private renderOptions(options: SelectOption[]) {\n        return options.map((o: SelectOption) => {\n            return <option key={o.id} value={o.id} label={o.label} />;\n        });\n    }\n\n    private handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const { onChange } = this.props;\n        const { target: { value } } = e;\n        if (value !== undefined) {\n            this.setState({ value });\n        }\n        e.stopPropagation();\n        onChange(e);\n    };\n}\n","import * as React from 'react';\nimport './input-container.css';\n\nexport interface InputContainerProps {\n    label: string;\n    children: JSX.Element\n}\n\nexport default class InputContainer extends React.Component<InputContainerProps, {}> {\n    public render() {\n        const { children, label } = this.props;\n        return (\n            <div className=\"input-container\">\n                <label className=\"input-container__label\">{label}</label>\n                {children}\n            </div>\n        );\n    }\n}\n","import * as React from 'react';\nimport { PumpPin, Recipe, RecipeFamily, ServerActions } from '../../types';\nimport Button, { ButtonType } from '../button/button';\nimport { Input } from '../input/input';\nimport './recipe-edit.css';\nimport { browserHistory } from '../../core/browser-history';\nimport { Select } from '../select/select';\nimport InputContainer from '../input-container/input-container';\nimport { getCurrentFamily } from './recipe-utils';\nimport { ROUTE } from '../../routes';\nimport { withStateMachine, StateMachineInjectedProps } from 'react-xstate-hoc';\nimport { RecipeContext, RecipeMachineStateSchema, RecipeMachineEvent, RecipeInitialContext, RecipeStateMachine, RecipeMachineAction } from './recipe-machine';\nimport { RouteComponentProps } from 'react-router';\nimport { webSocketService } from 'src/core/websocket';\n\ninterface RecipeRouterProps {\n    recipe?: Recipe;\n    families: RecipeFamily[];\n}\n\ntype RecipeEditBaseProps = StateMachineInjectedProps<RecipeContext, RecipeMachineStateSchema, RecipeMachineEvent> & RouteComponentProps<RecipeRouterProps>;\n\nexport class RecipeEditBase extends React.PureComponent<RecipeEditBaseProps> {\n\n    private families: RecipeFamily[] = [];\n\n    constructor(props: RecipeEditBaseProps) {\n        super(props);\n        const { injectMachineOptions } = props;\n        injectMachineOptions({\n            actions: {\n                [ServerActions.CMD_EDIT]: (ctx) => {\n                    webSocketService.send(ServerActions.CMD_EDIT, { recipe: { ...ctx } });\n                },\n                [ServerActions.CMD_DELETE]: (ctx) => {\n                    const { id } = ctx;\n                    webSocketService.send(ServerActions.CMD_DELETE, { id });\n                }\n            }\n        });\n    }\n\n    public componentDidMount() {\n        const { history: { location: { state: { recipe, families } } }, dispatch } = this.props;\n        this.families = families;\n        if (recipe) {\n            dispatch({ type: RecipeMachineAction.HYDRATE, recipe });\n        } else {\n            dispatch({ type: RecipeMachineAction.CREATE });\n        }\n    }\n\n    public render() {\n        const { context: { id, label, recipeFamily, description, parts } } = this.props;\n        const families = this.families;\n        if (id && families) {\n            return <div className=\"recipe-edit\">\n                <InputContainer label=\"Label\">\n                    <Input name=\"label\" value={label} onChange={this.handleLabelChange} />\n                </InputContainer>\n                <InputContainer label=\"Label\">\n                    <Select name=\"recipeFamily\" value={recipeFamily} onChange={this.handleSelect} options={families} />\n                </InputContainer>\n                <InputContainer label=\"Description\">\n                    <Input name=\"description\" value={description} onChange={this.handleDescriptionChange} />\n                </InputContainer>\n                <div />\n                {this.renderPumps(parts)}\n                <Button onClick={this.handleRemove} type={ButtonType.DEFAULT}>DELETE</Button>\n                <Button onClick={this.handleSubmit} type={ButtonType.ACTION}>SAVE</Button>\n            </div>;\n        }\n        return null;\n    }\n\n    private renderPumps(parts: number[]) {\n        const { context: { recipeFamily } } = this.props;\n        const families = this.families;\n        if (families && recipeFamily) {\n            const family = getCurrentFamily(families, recipeFamily);\n            if (family) {\n                const { ingredients } = family;\n                return PumpPin.map((i: number, indx: number) => {\n                    const name = `${indx}`;\n                    const value = parts[indx] || 0;\n                    if (ingredients[indx]) {\n                        const { label } = ingredients[indx];\n                        return <InputContainer key={name} label={label}>\n                            <Input name={name} value={value.toString()} onChange={this.handlePumpChange} />\n                        </InputContainer>;\n                    }\n                    return null;\n                });\n            }\n        }\n        return null;\n    }\n\n    private handleLabelChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        const { target: { value: label } } = e;\n        dispatch({ type: RecipeMachineAction.SET_LABEL, label });\n    }\n\n    private handleDescriptionChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        const { target: { value: description } } = e;\n        dispatch({ type: RecipeMachineAction.SET_DESCRIPTION, description });\n    }\n\n    private handleRemove = () => {\n        const { dispatch } = this.props;\n        dispatch({ type: RecipeMachineAction.DELETE });\n        browserHistory.push(ROUTE.root);\n    }\n\n    private handleSubmit = () => {\n        const { dispatch } = this.props;\n        dispatch({ type: RecipeMachineAction.SAVE });\n        browserHistory.push(ROUTE.root);\n    }\n\n    private handlePumpChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { dispatch } = this.props;\n        const { target: { value, name } } = e;\n        dispatch({ type: RecipeMachineAction.SET_PART, id: name, value });\n    }\n\n    private handleSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const { dispatch } = this.props;\n        const { target: { value: recipeFamily } } = e;\n        dispatch({ type: RecipeMachineAction.SET_FAMILY, recipeFamily })\n    }\n}\n\nexport const RecipeEdit = withStateMachine(RecipeEditBase, RecipeStateMachine, RecipeInitialContext);","import * as React from 'react';\nimport './App.css';\nimport { Router, Route, Switch } from 'react-router';\nimport { RecipeList } from './components/recipe/recipe-list';\nimport { browserHistory } from './core/browser-history';\nimport { RecipeEdit } from './components/recipe/recipe-edit';\nimport { ROUTE } from './routes';\n\n\nclass App extends React.Component<{}, {}> {\n\n  public render() {\n    return (\n      <div className=\"App\">\n        <Router history={browserHistory}>\n          <Switch>\n            <Route path={ROUTE.edit} component={RecipeEdit} />\n            <Route path={ROUTE.root} component={RecipeList} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}